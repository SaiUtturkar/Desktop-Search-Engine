
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */
public class Home_search extends javax.swing.JFrame {

    /**
     * Creates new form Home_search
     */
    
    Connection con=null;
    PreparedStatement pst=null;
    ResultSet rs=null;
    static int last_token_index=0;
    static int x=0;
    int found=0;
    
    
    public Home_search() {
        initComponents();
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jtf_search = new javax.swing.JTextField();
        jb_search = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lb_status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Desktop Search Engine");

        jPanel1.setBackground(new java.awt.Color(163, 198, 252));

        jtf_search.setToolTipText("Enter_search_query");

        jb_search.setBackground(new java.awt.Color(137, 182, 249));
        jb_search.setFont(new java.awt.Font("Source Sans Pro Semibold", 3, 14)); // NOI18N
        jb_search.setText("Search");
        jb_search.setToolTipText("Start");
        jb_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_searchActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon4.jpg"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Trajan Pro 3", 3, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("     The Smarter Way To Search");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(73, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_search))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jb_search, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(39, 39, 39))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jb_search, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(22, 22, 22))))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Open", "Description"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Status :");

        lb_status.setText("Ready to use...!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lb_status)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                    .addComponent(lb_status))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void jb_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_searchActionPerformed
        // TODO add your handling code here:
        
        
        String tmp;
        String name;
        String tokens[]=new String[20];
        
        int type=0;
        int i=0;
        lb_status.setText("Searching...");
        found=0;

        DefaultTableModel df=(DefaultTableModel)jTable1.getModel();
        df.setRowCount(0);
        
        lb_status.setText("Started...");
        
        if(jtf_search.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter valid Search Query");
        }
        else
        {

            
            //TOKENIZE INPUT STRING FROM USER
            StringTokenizer st = new StringTokenizer(jtf_search.getText());
            while (st.hasMoreTokens())
            {
                tokens[i]=st.nextToken();
                i++;   
            }
            last_token_index=i;
            
            for(int c=0;c<last_token_index;c++)
            {
                System.out.println(" "+tokens[c]);
            }
            

                        try
                        {
                            con=new DBConnect().getConnect();
                            for(int c=0;c<last_token_index;c++)
                            {
                                pst=con.prepareStatement("select * from keywords where key_para like '%"+ token[c] +"%' ");
                                rs=pst.executeQuery();

                                if(rs.next())
                                {
                                    type=rs.getInt("type");
                                    tokens[c]=null;
                                    
                                    break;

                                }
                            }
                        }
                        catch(Exception ex)
                            
                        {
                            JOptionPane.showMessageDialog(null, ex);
                        }
            
            if(type==0)
            {
                JOptionPane.showMessageDialog(null, "Type not found");
                
                lb_status.setText("Searching in all tables...");
                
                try
                {
                    con=new DBConnect().getConnect();
                    for(int c=0;c<last_token_index;c++)
                    {
                        tmp=tokens[c];
                        pst=con.prepareStatement("select * from movies where movie_name like '% "+tmp+" %' or actors like '% "+tmp+" %' or actress like '% "+tmp+" %' or director like '% "+tmp+" %' or producer like '% "+tmp+" %' or production_house like '% "+tmp+" %' or movie_type like '% "+tmp+" %' or year like '% "+tmp+" %' or ratings like '% "+tmp+" %' or resolution like '% "+tmp+" %' or languages like '% "+tmp+" %' or awards like '% "+tmp+" %' or movie_name like '"+tmp+" %' or actors like '"+tmp+" %' or actress like '"+tmp+" %' or director like '"+tmp+" %' or producer like '"+tmp+" %' or production_house like '"+tmp+" %' or movie_type like '"+tmp+" %' or year like '"+tmp+" %' or ratings like '"+tmp+" %' or resolution like '"+tmp+" %' or languages like '"+tmp+" %' or awards like '"+tmp+" %' or movie_name like '% "+tmp+"' or actors like '% "+tmp+"' or actress like '% "+tmp+"' or director like '% "+tmp+"' or producer like '% "+tmp+"' or production_house like '% "+tmp+"' or movie_type like '% "+tmp+"' or year like '% "+tmp+"' or ratings like '% "+tmp+"' or resolution like '% "+tmp+"' or languages like '% "+tmp+"' or awards like '% "+tmp+"' or movie_name like '"+tmp+"' or actors like '"+tmp+"' or actress like '"+tmp+"' or director like '"+tmp+"' or producer like '"+tmp+"' or production_house like '"+tmp+"' or movie_type like '"+tmp+"' or year like '"+tmp+"' or ratings like '"+tmp+"' or resolution like '"+tmp+"' or languages like '"+tmp+"' or awards like '"+tmp+"' ");
                        rs=pst.executeQuery();

                        while(rs.next())
                        {
                                    found=1;
                                    String path=rs.getString("path");
                                    String id=Integer.toString(rs.getInt("movie_id"));
                                    name=rs.getString("movie_name");
                                    df.addRow(new Object[]{name,path,id});
                                    
                                    
                                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());
                                    jTable1.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JTextField()));

                                    jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer1());
                                    jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor1(new JTextField()));
                                  
                        }
                    }    

                }
                catch(Exception ex)
                {
                            JOptionPane.showMessageDialog(null, ex);
                }
                
                try
                        {
                            con=new DBConnect().getConnect();
                            for(int c=0;c<last_token_index;c++)
                            {
                                tmp=tokens[c];
                                pst=con.prepareStatement("select * from songs where song_name like '% "+tmp+" %' or singers like '% "+tmp+" %' or composer like '% "+tmp+" %' or musician like '% "+tmp+" %' or version like '% "+tmp+" %' or album like '% "+tmp+" %' or actors like '% "+tmp+" %' or actress like '% "+tmp+" %' or quality like '% "+tmp+" %' or year like '% "+tmp+" %' or song_type like '% "+tmp+" %' or song_name like '"+tmp+" %' or singers like '"+tmp+" %' or composer like '"+tmp+" %' or musician like '"+tmp+" %' or version like '"+tmp+" %' or album like '"+tmp+" %' or actors like '"+tmp+" %' or actress like '"+tmp+" %' or quality like '"+tmp+" %' or year like '"+tmp+" %' or song_type like '"+tmp+" %' or song_name like '% "+tmp+"' or singers like '% "+tmp+"' or composer like '% "+tmp+"' or musician like '% "+tmp+"' or version like '% "+tmp+"' or album like '% "+tmp+"' or actors like '% "+tmp+"' or actress like '% "+tmp+"' or quality like '% "+tmp+"' or year like '% "+tmp+"' or song_type like '% "+tmp+"' or song_name like '"+tmp+"' or singers like '"+tmp+"' or composer like '"+tmp+"' or musician like '"+tmp+"' or version like '"+tmp+"' or album like '"+tmp+"' or actors like '"+tmp+"' or actress like '"+tmp+"' or quality like '"+tmp+"' or year like '"+tmp+"' or song_type like '"+tmp+"' ");
                                rs=pst.executeQuery();

                                while(rs.next())
                                {
                                    found=1;
                                    String path=rs.getString("path");
                                    String id=Integer.toString(rs.getInt("song_id"));
                                    name=rs.getString("song_name");
                                    df.addRow(new Object[]{name,path,id});
   
                                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());
                                    jTable1.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JTextField()));

                                    jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer1());
                                    jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor1(new JTextField()));

                                }
                            }    

                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                try
                        {
                            con=new DBConnect().getConnect();
                            for(int c=0;c<last_token_index;c++)
                            {
                                tmp=tokens[c];
                                pst=con.prepareStatement("select * from images where image_name like '% "+tmp+" %' or img_type like '% "+tmp+" %' or extensions like '% "+tmp+" %' or tags like '% "+tmp+" %' or quality like '% "+tmp+" %' or image_name like '"+tmp+" %' or img_type like '"+tmp+" %' or extensions like '"+tmp+" %' or tags like '"+tmp+" %' or quality like '"+tmp+" %' or image_name like '% "+tmp+"' or img_type like '% "+tmp+"' or extensions like '% "+tmp+"' or tags like '% "+tmp+"' or quality like '% "+tmp+"' or image_name like '"+tmp+"' or img_type like '"+tmp+"' or extensions like '"+tmp+"' or tags like '"+tmp+"' or quality like '"+tmp+"' ");
                                rs=pst.executeQuery();

                                while(rs.next())
                                {
                                    found=1;
                                    String path=rs.getString("path");
                                    String id=Integer.toString(rs.getInt("img_id"));
                                    name=rs.getString("image_name");
                                    df.addRow(new Object[]{name,path,id});
   
                                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());
                                    jTable1.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JTextField()));

                                    jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer1());
                                    jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor1(new JTextField()));

                                }
                            }    

                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                try
                        {
                            con=new DBConnect().getConnect();
                            for(int c=0;c<last_token_index;c++)
                            {
                                tmp=tokens[c];
                                pst=con.prepareStatement("select * from documents where doc_name like '% "+tmp+" %' or extensions like '% "+tmp+" %' or description like '% "+tmp+" %' or doc_name like '"+tmp+" %' or extensions like '"+tmp+" %' or description like '"+tmp+" %' or doc_name like '% "+tmp+"' or extensions like '% "+tmp+"' or description like '% "+tmp+"' or doc_name like '"+tmp+"' or extensions like '"+tmp+"' or description like '"+tmp+"' ");
                                rs=pst.executeQuery();

                                while(rs.next())
                                {
                                    found=1;
                                    String path=rs.getString("path");
                                    String id=Integer.toString(rs.getInt("doc_id"));
                                    name=rs.getString("doc_name");
                                    df.addRow(new Object[]{name,path,id});
   
                                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());
                                    jTable1.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JTextField()));

                                    jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer1());
                                    jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor1(new JTextField()));

                                }
                            }    

                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                
                        
                
                
                
                
                
                
            }
            else if(type==1)
            {
                JOptionPane.showMessageDialog(null, "Type found ###Movie");
                
                
                try
                        {
                            con=new DBConnect().getConnect();
                            for(int c=0;c<last_token_index;c++)
                            {
                                tmp=tokens[c];
                                pst=con.prepareStatement("select * from movies where movie_name like '% "+tmp+" %' or actors like '% "+tmp+" %' or actress like '% "+tmp+" %' or director like '% "+tmp+" %' or producer like '% "+tmp+" %' or production_house like '% "+tmp+" %' or movie_type like '% "+tmp+" %' or year like '% "+tmp+" %' or ratings like '% "+tmp+" %' or resolution like '% "+tmp+" %' or languages like '% "+tmp+" %' or awards like '% "+tmp+" %' or movie_name like '"+tmp+" %' or actors like '"+tmp+" %' or actress like '"+tmp+" %' or director like '"+tmp+" %' or producer like '"+tmp+" %' or production_house like '"+tmp+" %' or movie_type like '"+tmp+" %' or year like '"+tmp+" %' or ratings like '"+tmp+" %' or resolution like '"+tmp+" %' or languages like '"+tmp+" %' or awards like '"+tmp+" %' or movie_name like '% "+tmp+"' or actors like '% "+tmp+"' or actress like '% "+tmp+"' or director like '% "+tmp+"' or producer like '% "+tmp+"' or production_house like '% "+tmp+"' or movie_type like '% "+tmp+"' or year like '% "+tmp+"' or ratings like '% "+tmp+"' or resolution like '% "+tmp+"' or languages like '% "+tmp+"' or awards like '% "+tmp+"' or movie_name like '"+tmp+"' or actors like '"+tmp+"' or actress like '"+tmp+"' or director like '"+tmp+"' or producer like '"+tmp+"' or production_house like '"+tmp+"' or movie_type like '"+tmp+"' or year like '"+tmp+"' or ratings like '"+tmp+"' or resolution like '"+tmp+"' or languages like '"+tmp+"' or awards like '"+tmp+"' ");
                                rs=pst.executeQuery();

                                while(rs.next())
                                {
                                    found=1;
                                    String path=rs.getString("path");
                                    String id=Integer.toString(rs.getInt("movie_id"));
                                    name=rs.getString("movie_name");
                                    df.addRow(new Object[]{name,path,id});
                                    
                                    
                                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());
                                    jTable1.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JTextField()));

                                    jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer1());
                                    jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor1(new JTextField()));
                                  
                                }
                            }    

                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                
                
                
                
            }
            else if(type==2)
            {
                
                        JOptionPane.showMessageDialog(null, "Type found ###Song");
                
                
                try
                        {
                            con=new DBConnect().getConnect();
                            for(int c=0;c<last_token_index;c++)
                            {
                                tmp=tokens[c];
                                pst=con.prepareStatement("select * from songs where song_name like '% "+tmp+" %' or singers like '% "+tmp+" %' or composer like '% "+tmp+" %' or musician like '% "+tmp+" %' or version like '% "+tmp+" %' or album like '% "+tmp+" %' or actors like '% "+tmp+" %' or actress like '% "+tmp+" %' or quality like '% "+tmp+" %' or year like '% "+tmp+" %' or song_type like '% "+tmp+" %' or song_name like '"+tmp+" %' or singers like '"+tmp+" %' or composer like '"+tmp+" %' or musician like '"+tmp+" %' or version like '"+tmp+" %' or album like '"+tmp+" %' or actors like '"+tmp+" %' or actress like '"+tmp+" %' or quality like '"+tmp+" %' or year like '"+tmp+" %' or song_type like '"+tmp+" %' or song_name like '% "+tmp+"' or singers like '% "+tmp+"' or composer like '% "+tmp+"' or musician like '% "+tmp+"' or version like '% "+tmp+"' or album like '% "+tmp+"' or actors like '% "+tmp+"' or actress like '% "+tmp+"' or quality like '% "+tmp+"' or year like '% "+tmp+"' or song_type like '% "+tmp+"' or song_name like '"+tmp+"' or singers like '"+tmp+"' or composer like '"+tmp+"' or musician like '"+tmp+"' or version like '"+tmp+"' or album like '"+tmp+"' or actors like '"+tmp+"' or actress like '"+tmp+"' or quality like '"+tmp+"' or year like '"+tmp+"' or song_type like '"+tmp+"' ");
                                rs=pst.executeQuery();

                                while(rs.next())
                                {
                                    found=1;
                                    String path=rs.getString("path");
                                    String id=Integer.toString(rs.getInt("song_id"));
                                    name=rs.getString("song_name");
                                    df.addRow(new Object[]{name,path,id});
   
                                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());
                                    jTable1.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JTextField()));

                                    jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer1());
                                    jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor1(new JTextField()));

                                }
                            }    

                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                        
                
                        
            }
            else if(type==3)
            {
                
                        JOptionPane.showMessageDialog(null, "Type found ###Image");
                
                
                try
                        {
                            con=new DBConnect().getConnect();
                            for(int c=0;c<last_token_index;c++)
                            {
                                tmp=tokens[c];
                                pst=con.prepareStatement("select * from images where image_name like '% "+tmp+" %' or img_type like '% "+tmp+" %' or extensions like '% "+tmp+" %' or tags like '% "+tmp+" %' or quality like '% "+tmp+" %' or image_name like '"+tmp+" %' or img_type like '"+tmp+" %' or extensions like '"+tmp+" %' or tags like '"+tmp+" %' or quality like '"+tmp+" %' or image_name like '% "+tmp+"' or img_type like '% "+tmp+"' or extensions like '% "+tmp+"' or tags like '% "+tmp+"' or quality like '% "+tmp+"' or image_name like '"+tmp+"' or img_type like '"+tmp+"' or extensions like '"+tmp+"' or tags like '"+tmp+"' or quality like '"+tmp+"' ");
                                rs=pst.executeQuery();

                                while(rs.next())
                                {
                                    found=1;
                                    String path=rs.getString("path");
                                    String id=Integer.toString(rs.getInt("img_id"));
                                    name=rs.getString("image_name");
                                    df.addRow(new Object[]{name,path,id});
   
                                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());
                                    jTable1.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JTextField()));

                                    jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer1());
                                    jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor1(new JTextField()));

                                }
                            }    

                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(null, ex);
                        }
           
            }
            else if(type==4)
            {
                
                        JOptionPane.showMessageDialog(null, "Type found ###Documents");
                
                
                try
                        {
                            con=new DBConnect().getConnect();
                            for(int c=0;c<last_token_index;c++)
                            {
                                tmp=tokens[c];
                                pst=con.prepareStatement("select * from documents where doc_name like '% "+tmp+" %' or extensions like '% "+tmp+" %' or description like '% "+tmp+" %' or doc_name like '"+tmp+" %' or extensions like '"+tmp+" %' or description like '"+tmp+" %' or doc_name like '% "+tmp+"' or extensions like '% "+tmp+"' or description like '% "+tmp+"' or doc_name like '"+tmp+"' or extensions like '"+tmp+"' or description like '"+tmp+"' ");
                                rs=pst.executeQuery();

                                while(rs.next())
                                {
                                    found=1;
                                    String path=rs.getString("path");
                                    String id=Integer.toString(rs.getInt("doc_id"));
                                    name=rs.getString("doc_name");
                                    df.addRow(new Object[]{name,path,id});
   
                                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());
                                    jTable1.getColumnModel().getColumn(1).setCellEditor(new ButtonEditor(new JTextField()));

                                    jTable1.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer1());
                                    jTable1.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor1(new JTextField()));

                                }
                            }    

                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(null, ex);
                        }
           
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Code not done");
            }
            
            if(found==0)
            {
                lb_status.setText("Results not found...");
                JOptionPane.showMessageDialog(null, "Result not found");
                
            }
            else
            {
                lb_status.setText("Results found...");
                //JOptionPane.showMessageDialog(null, "Result found");
            }
            
                                    
                  
                                

                                    
                
            
            
        }
    }//GEN-LAST:event_jb_searchActionPerformed

    //BUTTON RENDERER CLASS
class ButtonRenderer extends JButton implements  TableCellRenderer
{
  //CONSTRUCTOR
  public ButtonRenderer() {
    //SET BUTTON PROPERTIES
    setOpaque(true);
  }
  @Override
  public Component getTableCellRendererComponent(JTable table, Object obj,
      boolean selected, boolean focused, int row, int col) {
    
    //SET PASSED OBJECT AS BUTTON TEXT
      setText((obj==null) ? "":obj.toString());
        
    return this;
  }
  
}
//BUTTON EDITOR CLASS
class ButtonEditor extends DefaultCellEditor
{
  protected JButton btn;
   private String lbl;
   private Boolean clicked;
   
   public ButtonEditor(JTextField txt) {
    super(txt);
    
    btn=new JButton();
    btn.setOpaque(true);
    
    //WHEN BUTTON IS CLICKED
    btn.addActionListener(new ActionListener() {
      
      @Override
      public void actionPerformed(ActionEvent e) {
        
        fireEditingStopped();
      }
    });
  }
   
   //OVERRIDE A COUPLE OF METHODS
   @Override
  public Component getTableCellEditorComponent(JTable table, Object obj,
      boolean selected, int row, int col) {
      //SET TEXT TO BUTTON,SET CLICKED TO TRUE,THEN RETURN THE BTN OBJECT
     lbl=(obj==null) ? "":obj.toString();
     btn.setText("Open");
     btn.setToolTipText("Click_to_Open");
     clicked=true;
    return btn;
    
    
  }
   
  //IF BUTTON CELL VALUE CHNAGES,IF CLICKED THAT IS
   @Override
  public Object getCellEditorValue() {
     if(clicked)
      {
      //SHOW US SOME MESSAGE
        
          if(lbl.equals("-"))
              JOptionPane.showMessageDialog(null,"File not found!!!");
          else
          {
                lb_status.setText("Opening the file...");
                File f=new File(lbl);
                try 
                {
                    Desktop.getDesktop().open(f);
                } 
                catch (IOException ex) 
                {
                    Logger.getLogger(search_page.class.getName()).log(Level.SEVERE, null, ex);
                }
          }   
        
        
      }
    //SET IT TO FALSE NOW THAT ITS CLICKED
    clicked=false;
    return new String(lbl);
  }
  
   @Override
  public boolean stopCellEditing() {
         //SET CLICKED TO FALSE FIRST
      clicked=false;
    return super.stopCellEditing();
  }
   
   @Override
  protected void fireEditingStopped() {
    // TODO Auto-generated method stub`
    super.fireEditingStopped();
  }
}

    








//BUTTON RENDERER CLASS
class ButtonRenderer1 extends JButton implements  TableCellRenderer
{
  //CONSTRUCTOR
  public ButtonRenderer1() {
    //SET BUTTON PROPERTIES
    setOpaque(true);
  }
  @Override
  public Component getTableCellRendererComponent(JTable table, Object obj,
      boolean selected, boolean focused, int row, int col) {
    
    //SET PASSED OBJECT AS BUTTON TEXT
      setText((obj==null) ? "":obj.toString());
        
    return this;
  }
  
}
//BUTTON EDITOR CLASS
class ButtonEditor1 extends DefaultCellEditor
{
  protected JButton btn1;
   private String lbl1;
   private Boolean clicked1;
   
   
   public ButtonEditor1(JTextField txt) {
    super(txt);
    
    
    btn1=new JButton();
    btn1.setOpaque(true);
    btn1.setBackground(Color.red);
    btn1.setToolTipText("Click_to_Describe");
    
    //WHEN BUTTON IS CLICKED
    btn1.addActionListener(new ActionListener() {
      
      @Override
      public void actionPerformed(ActionEvent e) {
        
        fireEditingStopped();
      }
    });
  }
   
   //OVERRIDE A COUPLE OF METHODS
   @Override
  public Component getTableCellEditorComponent(JTable table, Object obj,
      boolean selected, int row, int col) {
      //SET TEXT TO BUTTON,SET CLICKED TO TRUE,THEN RETURN THE BTN OBJECT
     lbl1=(obj==null) ? "":obj.toString();
     btn1.setText("Show");
     clicked1=true;
    return btn1;
  }
   
  //IF BUTTON CELL VALUE CHNAGES,IF CLICKED THAT IS
   @Override
  public Object getCellEditorValue() {
     if(clicked1)
      {
      //SHOW US SOME MESSAGE
          lb_status.setText("Describing the results...");
        JOptionPane.showMessageDialog(btn1, lbl1+" Clicked");
        
            new Song_data_display(lbl1).setVisible(true);
            new Movie_data_display(lbl1).setVisible(true);
            new Image_data_display1(lbl1).setVisible(true);
            new Document_data_display11(lbl1).setVisible(true);
            
              
       
      }
    //SET IT TO FALSE NOW THAT ITS CLICKED
    clicked1=false;
    return new String(lbl1);
  }
  
   @Override
  public boolean stopCellEditing() {
         //SET CLICKED TO FALSE FIRST
      clicked1=false;
    return super.stopCellEditing();
  }
   
   @Override
  protected void fireEditingStopped() {
    // TODO Auto-generated method stub`
    super.fireEditingStopped();
  }
}

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home_search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home_search().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jb_search;
    private javax.swing.JTextField jtf_search;
    private javax.swing.JLabel lb_status;
    // End of variables declaration//GEN-END:variables
}
